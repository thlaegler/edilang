/*
 * generated by Xtext 2.26.0
 */
package io.thlaegler.edifact.serializer;

import com.google.inject.Inject;
import io.thlaegler.edifact.edilang.BGMSegment;
import io.thlaegler.edifact.edilang.CNTSegment;
import io.thlaegler.edifact.edilang.CTASegment;
import io.thlaegler.edifact.edilang.CUXSegment;
import io.thlaegler.edifact.edilang.DTMSegment;
import io.thlaegler.edifact.edilang.DateAndTimeFunction;
import io.thlaegler.edifact.edilang.DateOnlyFunction;
import io.thlaegler.edifact.edilang.ERCSegment;
import io.thlaegler.edifact.edilang.EdiModel;
import io.thlaegler.edifact.edilang.EdilangPackage;
import io.thlaegler.edifact.edilang.FTXSegment;
import io.thlaegler.edifact.edilang.InterchangerFunction;
import io.thlaegler.edifact.edilang.LINSegment;
import io.thlaegler.edifact.edilang.LocationFunction;
import io.thlaegler.edifact.edilang.MOASegment;
import io.thlaegler.edifact.edilang.MSGFunction;
import io.thlaegler.edifact.edilang.MSGSegment;
import io.thlaegler.edifact.edilang.MessageBodyFunction;
import io.thlaegler.edifact.edilang.NADSegment;
import io.thlaegler.edifact.edilang.ODISegment;
import io.thlaegler.edifact.edilang.ORGSegment;
import io.thlaegler.edifact.edilang.OriginatorFunction;
import io.thlaegler.edifact.edilang.OriginatorIdentificationFunction;
import io.thlaegler.edifact.edilang.PATSegment;
import io.thlaegler.edifact.edilang.PCISegment;
import io.thlaegler.edifact.edilang.PDISegment;
import io.thlaegler.edifact.edilang.POCSegment;
import io.thlaegler.edifact.edilang.PRIFunction;
import io.thlaegler.edifact.edilang.PRISegment;
import io.thlaegler.edifact.edilang.ProductFunction;
import io.thlaegler.edifact.edilang.QTYSegment;
import io.thlaegler.edifact.edilang.RFFSegment;
import io.thlaegler.edifact.edilang.RPISegment;
import io.thlaegler.edifact.edilang.SystemDetailFunction;
import io.thlaegler.edifact.edilang.TAXSegment;
import io.thlaegler.edifact.edilang.TVLSegment;
import io.thlaegler.edifact.edilang.UCISegment;
import io.thlaegler.edifact.edilang.UNASegment;
import io.thlaegler.edifact.edilang.UNBSegment;
import io.thlaegler.edifact.edilang.UNHSegment;
import io.thlaegler.edifact.edilang.UNSSegment;
import io.thlaegler.edifact.edilang.UNTSegment;
import io.thlaegler.edifact.edilang.UNZSegment;
import io.thlaegler.edifact.services.EdilangGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EdilangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EdilangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EdilangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EdilangPackage.BGM_SEGMENT:
				sequence_BGMSegment(context, (BGMSegment) semanticObject); 
				return; 
			case EdilangPackage.CNT_SEGMENT:
				sequence_CNTSegment(context, (CNTSegment) semanticObject); 
				return; 
			case EdilangPackage.CTA_SEGMENT:
				sequence_CTASegment(context, (CTASegment) semanticObject); 
				return; 
			case EdilangPackage.CUX_SEGMENT:
				sequence_CUXSegment(context, (CUXSegment) semanticObject); 
				return; 
			case EdilangPackage.DTM_SEGMENT:
				sequence_DTMSegment(context, (DTMSegment) semanticObject); 
				return; 
			case EdilangPackage.DATE_AND_TIME_FUNCTION:
				sequence_DateAndTimeFunction(context, (DateAndTimeFunction) semanticObject); 
				return; 
			case EdilangPackage.DATE_ONLY_FUNCTION:
				sequence_DateOnlyFunction(context, (DateOnlyFunction) semanticObject); 
				return; 
			case EdilangPackage.ERC_SEGMENT:
				sequence_ERCSegment(context, (ERCSegment) semanticObject); 
				return; 
			case EdilangPackage.EDI_MODEL:
				sequence_EdiModel(context, (EdiModel) semanticObject); 
				return; 
			case EdilangPackage.FTX_SEGMENT:
				sequence_FTXSegment(context, (FTXSegment) semanticObject); 
				return; 
			case EdilangPackage.INTERCHANGER_FUNCTION:
				sequence_InterchangerFunction(context, (InterchangerFunction) semanticObject); 
				return; 
			case EdilangPackage.LIN_SEGMENT:
				sequence_LINSegment(context, (LINSegment) semanticObject); 
				return; 
			case EdilangPackage.LOCATION_FUNCTION:
				sequence_LocationFunction(context, (LocationFunction) semanticObject); 
				return; 
			case EdilangPackage.MOA_SEGMENT:
				sequence_MOASegment(context, (MOASegment) semanticObject); 
				return; 
			case EdilangPackage.MSG_FUNCTION:
				sequence_MSGFunction(context, (MSGFunction) semanticObject); 
				return; 
			case EdilangPackage.MSG_SEGMENT:
				sequence_MSGSegment(context, (MSGSegment) semanticObject); 
				return; 
			case EdilangPackage.MESSAGE_BODY_FUNCTION:
				sequence_MessageBodyFunction(context, (MessageBodyFunction) semanticObject); 
				return; 
			case EdilangPackage.NAD_SEGMENT:
				sequence_NADSegment(context, (NADSegment) semanticObject); 
				return; 
			case EdilangPackage.ODI_SEGMENT:
				sequence_ODISegment(context, (ODISegment) semanticObject); 
				return; 
			case EdilangPackage.ORG_SEGMENT:
				sequence_ORGSegment(context, (ORGSegment) semanticObject); 
				return; 
			case EdilangPackage.ORIGINATOR_FUNCTION:
				sequence_OriginatorFunction(context, (OriginatorFunction) semanticObject); 
				return; 
			case EdilangPackage.ORIGINATOR_IDENTIFICATION_FUNCTION:
				sequence_OriginatorIdentificationFunction(context, (OriginatorIdentificationFunction) semanticObject); 
				return; 
			case EdilangPackage.PAT_SEGMENT:
				sequence_PATSegment(context, (PATSegment) semanticObject); 
				return; 
			case EdilangPackage.PCI_SEGMENT:
				sequence_PCISegment(context, (PCISegment) semanticObject); 
				return; 
			case EdilangPackage.PDI_SEGMENT:
				sequence_PDISegment(context, (PDISegment) semanticObject); 
				return; 
			case EdilangPackage.POC_SEGMENT:
				sequence_POCSegment(context, (POCSegment) semanticObject); 
				return; 
			case EdilangPackage.PRI_FUNCTION:
				sequence_PRIFunction(context, (PRIFunction) semanticObject); 
				return; 
			case EdilangPackage.PRI_SEGMENT:
				sequence_PRISegment(context, (PRISegment) semanticObject); 
				return; 
			case EdilangPackage.PRODUCT_FUNCTION:
				sequence_ProductFunction(context, (ProductFunction) semanticObject); 
				return; 
			case EdilangPackage.QTY_SEGMENT:
				sequence_QTYSegment(context, (QTYSegment) semanticObject); 
				return; 
			case EdilangPackage.RFF_SEGMENT:
				sequence_RFFSegment(context, (RFFSegment) semanticObject); 
				return; 
			case EdilangPackage.RPI_SEGMENT:
				sequence_RPISegment(context, (RPISegment) semanticObject); 
				return; 
			case EdilangPackage.SYSTEM_DETAIL_FUNCTION:
				sequence_SystemDetailFunction(context, (SystemDetailFunction) semanticObject); 
				return; 
			case EdilangPackage.TAX_SEGMENT:
				sequence_TAXSegment(context, (TAXSegment) semanticObject); 
				return; 
			case EdilangPackage.TVL_SEGMENT:
				sequence_TVLSegment(context, (TVLSegment) semanticObject); 
				return; 
			case EdilangPackage.UCI_SEGMENT:
				sequence_UCISegment(context, (UCISegment) semanticObject); 
				return; 
			case EdilangPackage.UNA_SEGMENT:
				sequence_UNASegment(context, (UNASegment) semanticObject); 
				return; 
			case EdilangPackage.UNB_SEGMENT:
				sequence_UNBSegment(context, (UNBSegment) semanticObject); 
				return; 
			case EdilangPackage.UNH_SEGMENT:
				sequence_UNHSegment(context, (UNHSegment) semanticObject); 
				return; 
			case EdilangPackage.UNS_SEGMENT:
				sequence_UNSSegment(context, (UNSSegment) semanticObject); 
				return; 
			case EdilangPackage.UNT_SEGMENT:
				sequence_UNTSegment(context, (UNTSegment) semanticObject); 
				return; 
			case EdilangPackage.UNZ_SEGMENT:
				sequence_UNZSegment(context, (UNZSegment) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns BGMSegment
	 *     BGMSegment returns BGMSegment
	 *
	 * Constraint:
	 *     (segment='BGM' num1=ID? num2=ID? num3=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_BGMSegment(ISerializationContext context, BGMSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns CNTSegment
	 *     CNTSegment returns CNTSegment
	 *
	 * Constraint:
	 *     (segment='CNT' todo1=ID? todo2=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_CNTSegment(ISerializationContext context, CNTSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns CTASegment
	 *     CTASegment returns CTASegment
	 *
	 * Constraint:
	 *     (segment='CTA' todo=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_CTASegment(ISerializationContext context, CTASegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns CUXSegment
	 *     CUXSegment returns CUXSegment
	 *
	 * Constraint:
	 *     (segment='CUX' num=ID currency=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_CUXSegment(ISerializationContext context, CUXSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns DTMSegment
	 *     DTMSegment returns DTMSegment
	 *
	 * Constraint:
	 *     (segment='DTM' num1=ID (num2=ID num3=ID)? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_DTMSegment(ISerializationContext context, DTMSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns DateAndTimeFunction
	 *     DateAndTimeFunction returns DateAndTimeFunction
	 *
	 * Constraint:
	 *     (date6=ID time4=ID)
	 * </pre>
	 */
	protected void sequence_DateAndTimeFunction(ISerializationContext context, DateAndTimeFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.DATE_AND_TIME_FUNCTION__DATE6) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.DATE_AND_TIME_FUNCTION__DATE6));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.DATE_AND_TIME_FUNCTION__TIME4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.DATE_AND_TIME_FUNCTION__TIME4));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateAndTimeFunctionAccess().getDate6IDTerminalRuleCall_0_0(), semanticObject.getDate6());
		feeder.accept(grammarAccess.getDateAndTimeFunctionAccess().getTime4IDTerminalRuleCall_2_0(), semanticObject.getTime4());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns DateOnlyFunction
	 *     DateOnlyFunction returns DateOnlyFunction
	 *
	 * Constraint:
	 *     date6=ID
	 * </pre>
	 */
	protected void sequence_DateOnlyFunction(ISerializationContext context, DateOnlyFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.DATE_ONLY_FUNCTION__DATE6) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.DATE_ONLY_FUNCTION__DATE6));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateOnlyFunctionAccess().getDate6IDTerminalRuleCall_0(), semanticObject.getDate6());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns ERCSegment
	 *     ERCSegment returns ERCSegment
	 *
	 * Constraint:
	 *     (segment='ERC' code1=ID lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_ERCSegment(ISerializationContext context, ERCSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ERC_SEGMENT__CODE1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ERC_SEGMENT__CODE1));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getERCSegmentAccess().getSegmentERCKeyword_0_0(), semanticObject.getSegment());
		feeder.accept(grammarAccess.getERCSegmentAccess().getCode1IDTerminalRuleCall_2_0(), semanticObject.getCode1());
		feeder.accept(grammarAccess.getERCSegmentAccess().getLineEndQUOTE_AND_NLTerminalRuleCall_3_0(), semanticObject.getLineEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EdiModel returns EdiModel
	 *
	 * Constraint:
	 *     segments+=AbstractEdiSegment+
	 * </pre>
	 */
	protected void sequence_EdiModel(ISerializationContext context, EdiModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns FTXSegment
	 *     FTXSegment returns FTXSegment
	 *
	 * Constraint:
	 *     (
	 *         segment='FTX' 
	 *         todo1=ID? 
	 *         todo2=ID? 
	 *         todo3=ID? 
	 *         todo4=ID? 
	 *         lineEnd=QUOTE_AND_NL
	 *     )
	 * </pre>
	 */
	protected void sequence_FTXSegment(ISerializationContext context, FTXSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns InterchangerFunction
	 *     InterchangerFunction returns InterchangerFunction
	 *
	 * Constraint:
	 *     (interchange=ID interchange2=ID?)
	 * </pre>
	 */
	protected void sequence_InterchangerFunction(ISerializationContext context, InterchangerFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns LINSegment
	 *     LINSegment returns LINSegment
	 *
	 * Constraint:
	 *     (segment='LIN' code1=ID? code2=ID? (code3=ID code4=ID)? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_LINSegment(ISerializationContext context, LINSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns LocationFunction
	 *     LocationFunction returns LocationFunction
	 *
	 * Constraint:
	 *     (locationId=ID locationName=ID?)
	 * </pre>
	 */
	protected void sequence_LocationFunction(ISerializationContext context, LocationFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns MOASegment
	 *     MOASegment returns MOASegment
	 *
	 * Constraint:
	 *     (segment='MOA' code1=ID code2=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_MOASegment(ISerializationContext context, MOASegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns MSGFunction
	 *     MSGFunction returns MSGFunction
	 *
	 * Constraint:
	 *     (businessFunction=ID? messageFunction1=ID (codeListResponsibleAgency=ID messageFunction2=ID?)?)
	 * </pre>
	 */
	protected void sequence_MSGFunction(ISerializationContext context, MSGFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns MSGSegment
	 *     MSGSegment returns MSGSegment
	 *
	 * Constraint:
	 *     (segment='MSG' messageFunction=MSGFunction? responseType=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_MSGSegment(ISerializationContext context, MSGSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns MessageBodyFunction
	 *     MessageBodyFunction returns MessageBodyFunction
	 *
	 * Constraint:
	 *     (type=ID version=ID? release=ID? controllingAgency=ID? more=ID?)
	 * </pre>
	 */
	protected void sequence_MessageBodyFunction(ISerializationContext context, MessageBodyFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns NADSegment
	 *     NADSegment returns NADSegment
	 *
	 * Constraint:
	 *     (
	 *         segment='NAD' 
	 *         code=ID 
	 *         manufacturer1=ID? 
	 *         manufacturer2=ID? 
	 *         manufacturer3=ID? 
	 *         lineEnd=QUOTE_AND_NL
	 *     )
	 * </pre>
	 */
	protected void sequence_NADSegment(ISerializationContext context, NADSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns ODISegment
	 *     ODISegment returns ODISegment
	 *
	 * Constraint:
	 *     (segment='ODI' origin=ID? destination=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_ODISegment(ISerializationContext context, ODISegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns ORGSegment
	 *     ORGSegment returns ORGSegment
	 *
	 * Constraint:
	 *     (
	 *         segment='ORG' 
	 *         systemDetail1=SystemDetailFunction? 
	 *         originatorIdentification=OriginatorIdentificationFunction? 
	 *         location=LocationFunction? 
	 *         systemDetail2=SystemDetailFunction? 
	 *         originatorTypeCode=ID? 
	 *         originator=OriginatorFunction? 
	 *         originatorsAuthorityRequestCode=ID? 
	 *         (communicationNumber=ID partyIdIdentification=ID?)? 
	 *         lineEnd=QUOTE_AND_NL
	 *     )
	 * </pre>
	 */
	protected void sequence_ORGSegment(ISerializationContext context, ORGSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns OriginatorFunction
	 *     OriginatorFunction returns OriginatorFunction
	 *
	 * Constraint:
	 *     (countryCode=ID (currencyCode=ID languageCode=ID?)?)
	 * </pre>
	 */
	protected void sequence_OriginatorFunction(ISerializationContext context, OriginatorFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns OriginatorIdentificationFunction
	 *     OriginatorIdentificationFunction returns OriginatorIdentificationFunction
	 *
	 * Constraint:
	 *     (travelAgentId=ID inHouseId1=ID? inHouseId2=ID?)
	 * </pre>
	 */
	protected void sequence_OriginatorIdentificationFunction(ISerializationContext context, OriginatorIdentificationFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns PATSegment
	 *     PATSegment returns PATSegment
	 *
	 * Constraint:
	 *     (segment='PAT' segmentCount=ID lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_PATSegment(ISerializationContext context, PATSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.PAT_SEGMENT__SEGMENT_COUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.PAT_SEGMENT__SEGMENT_COUNT));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPATSegmentAccess().getSegmentPATKeyword_0_0(), semanticObject.getSegment());
		feeder.accept(grammarAccess.getPATSegmentAccess().getSegmentCountIDTerminalRuleCall_2_0(), semanticObject.getSegmentCount());
		feeder.accept(grammarAccess.getPATSegmentAccess().getLineEndQUOTE_AND_NLTerminalRuleCall_3_0(), semanticObject.getLineEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns PCISegment
	 *     PCISegment returns PCISegment
	 *
	 * Constraint:
	 *     (segment='PCI' todo=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_PCISegment(ISerializationContext context, PCISegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns PDISegment
	 *     PDISegment returns PDISegment
	 *
	 * Constraint:
	 *     (segment='PDI' productDetailsQualifier=ID? products+=ProductFunction* lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_PDISegment(ISerializationContext context, PDISegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns POCSegment
	 *     POCSegment returns POCSegment
	 *
	 * Constraint:
	 *     (segment='POC' location=ID? departureDate=ID? departureTime=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_POCSegment(ISerializationContext context, POCSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns PRIFunction
	 *     PRIFunction returns PRIFunction
	 *
	 * Constraint:
	 *     (
	 *         code1=ID 
	 *         code2=ID? 
	 *         code3=ID? 
	 *         code4=ID? 
	 *         code5=ID? 
	 *         code6=ID?
	 *     )
	 * </pre>
	 */
	protected void sequence_PRIFunction(ISerializationContext context, PRIFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns PRISegment
	 *     PRISegment returns PRISegment
	 *
	 * Constraint:
	 *     (segment='PRI' sub=PRIFunction lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_PRISegment(ISerializationContext context, PRISegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.PRI_SEGMENT__SUB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.PRI_SEGMENT__SUB));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPRISegmentAccess().getSegmentPRIKeyword_0_0(), semanticObject.getSegment());
		feeder.accept(grammarAccess.getPRISegmentAccess().getSubPRIFunctionParserRuleCall_2_0(), semanticObject.getSub());
		feeder.accept(grammarAccess.getPRISegmentAccess().getLineEndQUOTE_AND_NLTerminalRuleCall_3_0(), semanticObject.getLineEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns ProductFunction
	 *     ProductFunction returns ProductFunction
	 *
	 * Constraint:
	 *     (bookingClass=ID avail=ID?)
	 * </pre>
	 */
	protected void sequence_ProductFunction(ISerializationContext context, ProductFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns QTYSegment
	 *     QTYSegment returns QTYSegment
	 *
	 * Constraint:
	 *     (segment='QTY' code1=ID (code2=ID code3=ID?)? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_QTYSegment(ISerializationContext context, QTYSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns RFFSegment
	 *     RFFSegment returns RFFSegment
	 *
	 * Constraint:
	 *     (segment='RFF' rff1=ID rff2=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_RFFSegment(ISerializationContext context, RFFSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns RPISegment
	 *     RPISegment returns RPISegment
	 *
	 * Constraint:
	 *     (segment='RPI' numberOfPax=ID? status=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_RPISegment(ISerializationContext context, RPISegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiFunction returns SystemDetailFunction
	 *     SystemDetailFunction returns SystemDetailFunction
	 *
	 * Constraint:
	 *     (companyIdentification=ID (locationCode=ID locationName=ID?)?)
	 * </pre>
	 */
	protected void sequence_SystemDetailFunction(ISerializationContext context, SystemDetailFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns TAXSegment
	 *     TAXSegment returns TAXSegment
	 *
	 * Constraint:
	 *     (
	 *         segment='TAX' 
	 *         num=ID 
	 *         type=ID 
	 *         todo1=ID? 
	 *         todo2=ID? 
	 *         todo3=ID? 
	 *         todo4=ID? 
	 *         todo5=ID? 
	 *         todo6=ID? 
	 *         lineEnd=QUOTE_AND_NL
	 *     )
	 * </pre>
	 */
	protected void sequence_TAXSegment(ISerializationContext context, TAXSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns TVLSegment
	 *     TVLSegment returns TVLSegment
	 *
	 * Constraint:
	 *     (
	 *         segment='TVL' 
	 *         (dateAndTime+=DateOnlyFunction | (dateAndTime+=DateAndTimeFunction dateAndTime+=DateAndTimeFunction*)) 
	 *         originCode=ID? 
	 *         destinationCode=ID? 
	 *         carrierId=ID? 
	 *         (productId=ID (characteristicId=ID (productIdCharacteristic=ID descriptionIds+=ID*)?)?)? 
	 *         (productType=ID (lineItemNumber=ID processingIndicatorCode=ID?)?)? 
	 *         lineEnd=QUOTE_AND_NL
	 *     )
	 * </pre>
	 */
	protected void sequence_TVLSegment(ISerializationContext context, TVLSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns UCISegment
	 *     UCISegment returns UCISegment
	 *
	 * Constraint:
	 *     (
	 *         segment='UCI' 
	 *         interchangeControlReference=ID? 
	 *         interchangeSender=ID? 
	 *         interchangeRecipient=ID? 
	 *         action=ID? 
	 *         syntaxErrorCode=ID? 
	 *         segmentTagCode=ID? 
	 *         lineEnd=QUOTE_AND_NL
	 *     )
	 * </pre>
	 */
	protected void sequence_UCISegment(ISerializationContext context, UCISegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns UNASegment
	 *     UNASegment returns UNASegment
	 *
	 * Constraint:
	 *     (segment='UNA' lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_UNASegment(ISerializationContext context, UNASegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUNASegmentAccess().getSegmentUNAKeyword_0_0(), semanticObject.getSegment());
		feeder.accept(grammarAccess.getUNASegmentAccess().getLineEndQUOTE_AND_NLTerminalRuleCall_4_0(), semanticObject.getLineEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns UNBSegment
	 *     UNBSegment returns UNBSegment
	 *
	 * Constraint:
	 *     (
	 *         segment='UNB' 
	 *         syntax=ID? 
	 *         num1=ID? 
	 *         interchangeSender=InterchangerFunction? 
	 *         interchangeRecipient=InterchangerFunction? 
	 *         dateAndTime+=DateAndTimeFunction? 
	 *         interchangeControlSenderRef=ID? 
	 *         interchangeControlRecipientRef=ID? 
	 *         fse=ID? 
	 *         assiciationCode=ID? 
	 *         lineEnd=QUOTE_AND_NL
	 *     )
	 * </pre>
	 */
	protected void sequence_UNBSegment(ISerializationContext context, UNBSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns UNHSegment
	 *     UNHSegment returns UNHSegment
	 *
	 * Constraint:
	 *     (segment='UNH' messageReferenceNumber=ID message=MessageBodyFunction commonAccessReference=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_UNHSegment(ISerializationContext context, UNHSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns UNSSegment
	 *     UNSSegment returns UNSSegment
	 *
	 * Constraint:
	 *     (segment='UNS' segmentCount=ID lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_UNSSegment(ISerializationContext context, UNSSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__SEGMENT));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.UNS_SEGMENT__SEGMENT_COUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.UNS_SEGMENT__SEGMENT_COUNT));
			if (transientValues.isValueTransient(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdilangPackage.Literals.ABSTRACT_EDI_SEGMENT__LINE_END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUNSSegmentAccess().getSegmentUNSKeyword_0_0(), semanticObject.getSegment());
		feeder.accept(grammarAccess.getUNSSegmentAccess().getSegmentCountIDTerminalRuleCall_2_0(), semanticObject.getSegmentCount());
		feeder.accept(grammarAccess.getUNSSegmentAccess().getLineEndQUOTE_AND_NLTerminalRuleCall_3_0(), semanticObject.getLineEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns UNTSegment
	 *     UNTSegment returns UNTSegment
	 *
	 * Constraint:
	 *     (segment='UNT' segmentCount=ID? messageReferenceNumber=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_UNTSegment(ISerializationContext context, UNTSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractEdiSegment returns UNZSegment
	 *     UNZSegment returns UNZSegment
	 *
	 * Constraint:
	 *     (segment='UNZ' interchangeControlCount=ID? interchangeControlRef=ID? lineEnd=QUOTE_AND_NL)
	 * </pre>
	 */
	protected void sequence_UNZSegment(ISerializationContext context, UNZSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
