/**
 * generated by Xtext 2.26.0
 */
package io.thlaegler.edifact.edilang.impl;

import io.thlaegler.edifact.edilang.EdilangPackage;
import io.thlaegler.edifact.edilang.QVRSegment;
import io.thlaegler.edifact.edilang.QuantityDifferenceInformation;
import io.thlaegler.edifact.edilang.ReasonForChange;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>QVR Segment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.QVRSegmentImpl#getQuantityDifferenceInformation <em>Quantity Difference Information</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.QVRSegmentImpl#getDiscrepancyNatureIdentificationCode <em>Discrepancy Nature Identification Code</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.QVRSegmentImpl#getReasonForChange <em>Reason For Change</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QVRSegmentImpl extends AbstractEdiSegmentImpl implements QVRSegment
{
  /**
   * The cached value of the '{@link #getQuantityDifferenceInformation() <em>Quantity Difference Information</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantityDifferenceInformation()
   * @generated
   * @ordered
   */
  protected QuantityDifferenceInformation quantityDifferenceInformation;

  /**
   * The default value of the '{@link #getDiscrepancyNatureIdentificationCode() <em>Discrepancy Nature Identification Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiscrepancyNatureIdentificationCode()
   * @generated
   * @ordered
   */
  protected static final String DISCREPANCY_NATURE_IDENTIFICATION_CODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDiscrepancyNatureIdentificationCode() <em>Discrepancy Nature Identification Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiscrepancyNatureIdentificationCode()
   * @generated
   * @ordered
   */
  protected String discrepancyNatureIdentificationCode = DISCREPANCY_NATURE_IDENTIFICATION_CODE_EDEFAULT;

  /**
   * The cached value of the '{@link #getReasonForChange() <em>Reason For Change</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReasonForChange()
   * @generated
   * @ordered
   */
  protected ReasonForChange reasonForChange;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QVRSegmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdilangPackage.eINSTANCE.getQVRSegment();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QuantityDifferenceInformation getQuantityDifferenceInformation()
  {
    return quantityDifferenceInformation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQuantityDifferenceInformation(QuantityDifferenceInformation newQuantityDifferenceInformation, NotificationChain msgs)
  {
    QuantityDifferenceInformation oldQuantityDifferenceInformation = quantityDifferenceInformation;
    quantityDifferenceInformation = newQuantityDifferenceInformation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION, oldQuantityDifferenceInformation, newQuantityDifferenceInformation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuantityDifferenceInformation(QuantityDifferenceInformation newQuantityDifferenceInformation)
  {
    if (newQuantityDifferenceInformation != quantityDifferenceInformation)
    {
      NotificationChain msgs = null;
      if (quantityDifferenceInformation != null)
        msgs = ((InternalEObject)quantityDifferenceInformation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION, null, msgs);
      if (newQuantityDifferenceInformation != null)
        msgs = ((InternalEObject)newQuantityDifferenceInformation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION, null, msgs);
      msgs = basicSetQuantityDifferenceInformation(newQuantityDifferenceInformation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION, newQuantityDifferenceInformation, newQuantityDifferenceInformation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDiscrepancyNatureIdentificationCode()
  {
    return discrepancyNatureIdentificationCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDiscrepancyNatureIdentificationCode(String newDiscrepancyNatureIdentificationCode)
  {
    String oldDiscrepancyNatureIdentificationCode = discrepancyNatureIdentificationCode;
    discrepancyNatureIdentificationCode = newDiscrepancyNatureIdentificationCode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.QVR_SEGMENT__DISCREPANCY_NATURE_IDENTIFICATION_CODE, oldDiscrepancyNatureIdentificationCode, discrepancyNatureIdentificationCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReasonForChange getReasonForChange()
  {
    return reasonForChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReasonForChange(ReasonForChange newReasonForChange, NotificationChain msgs)
  {
    ReasonForChange oldReasonForChange = reasonForChange;
    reasonForChange = newReasonForChange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE, oldReasonForChange, newReasonForChange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReasonForChange(ReasonForChange newReasonForChange)
  {
    if (newReasonForChange != reasonForChange)
    {
      NotificationChain msgs = null;
      if (reasonForChange != null)
        msgs = ((InternalEObject)reasonForChange).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE, null, msgs);
      if (newReasonForChange != null)
        msgs = ((InternalEObject)newReasonForChange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE, null, msgs);
      msgs = basicSetReasonForChange(newReasonForChange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE, newReasonForChange, newReasonForChange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION:
        return basicSetQuantityDifferenceInformation(null, msgs);
      case EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE:
        return basicSetReasonForChange(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION:
        return getQuantityDifferenceInformation();
      case EdilangPackage.QVR_SEGMENT__DISCREPANCY_NATURE_IDENTIFICATION_CODE:
        return getDiscrepancyNatureIdentificationCode();
      case EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE:
        return getReasonForChange();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION:
        setQuantityDifferenceInformation((QuantityDifferenceInformation)newValue);
        return;
      case EdilangPackage.QVR_SEGMENT__DISCREPANCY_NATURE_IDENTIFICATION_CODE:
        setDiscrepancyNatureIdentificationCode((String)newValue);
        return;
      case EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE:
        setReasonForChange((ReasonForChange)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION:
        setQuantityDifferenceInformation((QuantityDifferenceInformation)null);
        return;
      case EdilangPackage.QVR_SEGMENT__DISCREPANCY_NATURE_IDENTIFICATION_CODE:
        setDiscrepancyNatureIdentificationCode(DISCREPANCY_NATURE_IDENTIFICATION_CODE_EDEFAULT);
        return;
      case EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE:
        setReasonForChange((ReasonForChange)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.QVR_SEGMENT__QUANTITY_DIFFERENCE_INFORMATION:
        return quantityDifferenceInformation != null;
      case EdilangPackage.QVR_SEGMENT__DISCREPANCY_NATURE_IDENTIFICATION_CODE:
        return DISCREPANCY_NATURE_IDENTIFICATION_CODE_EDEFAULT == null ? discrepancyNatureIdentificationCode != null : !DISCREPANCY_NATURE_IDENTIFICATION_CODE_EDEFAULT.equals(discrepancyNatureIdentificationCode);
      case EdilangPackage.QVR_SEGMENT__REASON_FOR_CHANGE:
        return reasonForChange != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (discrepancyNatureIdentificationCode: ");
    result.append(discrepancyNatureIdentificationCode);
    result.append(')');
    return result.toString();
  }

} //QVRSegmentImpl
