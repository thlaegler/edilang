/**
 * generated by Xtext 2.26.0
 */
package io.thlaegler.edifact.edilang.impl;

import io.thlaegler.edifact.edilang.EdilangPackage;
import io.thlaegler.edifact.edilang.TAXSegment;
import io.thlaegler.edifact.edilang.TaxAccountDetail;
import io.thlaegler.edifact.edilang.TaxDetail;
import io.thlaegler.edifact.edilang.TaxType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>TAX Segment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.TAXSegmentImpl#getTaxFunctionCodeQualifier <em>Tax Function Code Qualifier</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.TAXSegmentImpl#getTaxType <em>Tax Type</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.TAXSegmentImpl#getTaxAccountDetail <em>Tax Account Detail</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.TAXSegmentImpl#getTaxAssessmentBasicValue <em>Tax Assessment Basic Value</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.TAXSegmentImpl#getTaxDetail <em>Tax Detail</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.TAXSegmentImpl#getTaxCategoryCode <em>Tax Category Code</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.TAXSegmentImpl#getPartyTaxIdentifier <em>Party Tax Identifier</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.TAXSegmentImpl#getCalculationSequenceCode <em>Calculation Sequence Code</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TAXSegmentImpl extends AbstractEdiSegmentImpl implements TAXSegment
{
  /**
   * The default value of the '{@link #getTaxFunctionCodeQualifier() <em>Tax Function Code Qualifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxFunctionCodeQualifier()
   * @generated
   * @ordered
   */
  protected static final String TAX_FUNCTION_CODE_QUALIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTaxFunctionCodeQualifier() <em>Tax Function Code Qualifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxFunctionCodeQualifier()
   * @generated
   * @ordered
   */
  protected String taxFunctionCodeQualifier = TAX_FUNCTION_CODE_QUALIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getTaxType() <em>Tax Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxType()
   * @generated
   * @ordered
   */
  protected TaxType taxType;

  /**
   * The cached value of the '{@link #getTaxAccountDetail() <em>Tax Account Detail</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxAccountDetail()
   * @generated
   * @ordered
   */
  protected TaxAccountDetail taxAccountDetail;

  /**
   * The default value of the '{@link #getTaxAssessmentBasicValue() <em>Tax Assessment Basic Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxAssessmentBasicValue()
   * @generated
   * @ordered
   */
  protected static final String TAX_ASSESSMENT_BASIC_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTaxAssessmentBasicValue() <em>Tax Assessment Basic Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxAssessmentBasicValue()
   * @generated
   * @ordered
   */
  protected String taxAssessmentBasicValue = TAX_ASSESSMENT_BASIC_VALUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getTaxDetail() <em>Tax Detail</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxDetail()
   * @generated
   * @ordered
   */
  protected TaxDetail taxDetail;

  /**
   * The default value of the '{@link #getTaxCategoryCode() <em>Tax Category Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxCategoryCode()
   * @generated
   * @ordered
   */
  protected static final String TAX_CATEGORY_CODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTaxCategoryCode() <em>Tax Category Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaxCategoryCode()
   * @generated
   * @ordered
   */
  protected String taxCategoryCode = TAX_CATEGORY_CODE_EDEFAULT;

  /**
   * The default value of the '{@link #getPartyTaxIdentifier() <em>Party Tax Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPartyTaxIdentifier()
   * @generated
   * @ordered
   */
  protected static final String PARTY_TAX_IDENTIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPartyTaxIdentifier() <em>Party Tax Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPartyTaxIdentifier()
   * @generated
   * @ordered
   */
  protected String partyTaxIdentifier = PARTY_TAX_IDENTIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getCalculationSequenceCode() <em>Calculation Sequence Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCalculationSequenceCode()
   * @generated
   * @ordered
   */
  protected static final String CALCULATION_SEQUENCE_CODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCalculationSequenceCode() <em>Calculation Sequence Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCalculationSequenceCode()
   * @generated
   * @ordered
   */
  protected String calculationSequenceCode = CALCULATION_SEQUENCE_CODE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TAXSegmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdilangPackage.Literals.TAX_SEGMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTaxFunctionCodeQualifier()
  {
    return taxFunctionCodeQualifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaxFunctionCodeQualifier(String newTaxFunctionCodeQualifier)
  {
    String oldTaxFunctionCodeQualifier = taxFunctionCodeQualifier;
    taxFunctionCodeQualifier = newTaxFunctionCodeQualifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_FUNCTION_CODE_QUALIFIER, oldTaxFunctionCodeQualifier, taxFunctionCodeQualifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaxType getTaxType()
  {
    return taxType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTaxType(TaxType newTaxType, NotificationChain msgs)
  {
    TaxType oldTaxType = taxType;
    taxType = newTaxType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_TYPE, oldTaxType, newTaxType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaxType(TaxType newTaxType)
  {
    if (newTaxType != taxType)
    {
      NotificationChain msgs = null;
      if (taxType != null)
        msgs = ((InternalEObject)taxType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.TAX_SEGMENT__TAX_TYPE, null, msgs);
      if (newTaxType != null)
        msgs = ((InternalEObject)newTaxType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.TAX_SEGMENT__TAX_TYPE, null, msgs);
      msgs = basicSetTaxType(newTaxType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_TYPE, newTaxType, newTaxType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaxAccountDetail getTaxAccountDetail()
  {
    return taxAccountDetail;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTaxAccountDetail(TaxAccountDetail newTaxAccountDetail, NotificationChain msgs)
  {
    TaxAccountDetail oldTaxAccountDetail = taxAccountDetail;
    taxAccountDetail = newTaxAccountDetail;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL, oldTaxAccountDetail, newTaxAccountDetail);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaxAccountDetail(TaxAccountDetail newTaxAccountDetail)
  {
    if (newTaxAccountDetail != taxAccountDetail)
    {
      NotificationChain msgs = null;
      if (taxAccountDetail != null)
        msgs = ((InternalEObject)taxAccountDetail).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL, null, msgs);
      if (newTaxAccountDetail != null)
        msgs = ((InternalEObject)newTaxAccountDetail).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL, null, msgs);
      msgs = basicSetTaxAccountDetail(newTaxAccountDetail, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL, newTaxAccountDetail, newTaxAccountDetail));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTaxAssessmentBasicValue()
  {
    return taxAssessmentBasicValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaxAssessmentBasicValue(String newTaxAssessmentBasicValue)
  {
    String oldTaxAssessmentBasicValue = taxAssessmentBasicValue;
    taxAssessmentBasicValue = newTaxAssessmentBasicValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_ASSESSMENT_BASIC_VALUE, oldTaxAssessmentBasicValue, taxAssessmentBasicValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaxDetail getTaxDetail()
  {
    return taxDetail;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTaxDetail(TaxDetail newTaxDetail, NotificationChain msgs)
  {
    TaxDetail oldTaxDetail = taxDetail;
    taxDetail = newTaxDetail;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_DETAIL, oldTaxDetail, newTaxDetail);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaxDetail(TaxDetail newTaxDetail)
  {
    if (newTaxDetail != taxDetail)
    {
      NotificationChain msgs = null;
      if (taxDetail != null)
        msgs = ((InternalEObject)taxDetail).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.TAX_SEGMENT__TAX_DETAIL, null, msgs);
      if (newTaxDetail != null)
        msgs = ((InternalEObject)newTaxDetail).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.TAX_SEGMENT__TAX_DETAIL, null, msgs);
      msgs = basicSetTaxDetail(newTaxDetail, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_DETAIL, newTaxDetail, newTaxDetail));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTaxCategoryCode()
  {
    return taxCategoryCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaxCategoryCode(String newTaxCategoryCode)
  {
    String oldTaxCategoryCode = taxCategoryCode;
    taxCategoryCode = newTaxCategoryCode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__TAX_CATEGORY_CODE, oldTaxCategoryCode, taxCategoryCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPartyTaxIdentifier()
  {
    return partyTaxIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPartyTaxIdentifier(String newPartyTaxIdentifier)
  {
    String oldPartyTaxIdentifier = partyTaxIdentifier;
    partyTaxIdentifier = newPartyTaxIdentifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__PARTY_TAX_IDENTIFIER, oldPartyTaxIdentifier, partyTaxIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCalculationSequenceCode()
  {
    return calculationSequenceCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCalculationSequenceCode(String newCalculationSequenceCode)
  {
    String oldCalculationSequenceCode = calculationSequenceCode;
    calculationSequenceCode = newCalculationSequenceCode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.TAX_SEGMENT__CALCULATION_SEQUENCE_CODE, oldCalculationSequenceCode, calculationSequenceCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EdilangPackage.TAX_SEGMENT__TAX_TYPE:
        return basicSetTaxType(null, msgs);
      case EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL:
        return basicSetTaxAccountDetail(null, msgs);
      case EdilangPackage.TAX_SEGMENT__TAX_DETAIL:
        return basicSetTaxDetail(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdilangPackage.TAX_SEGMENT__TAX_FUNCTION_CODE_QUALIFIER:
        return getTaxFunctionCodeQualifier();
      case EdilangPackage.TAX_SEGMENT__TAX_TYPE:
        return getTaxType();
      case EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL:
        return getTaxAccountDetail();
      case EdilangPackage.TAX_SEGMENT__TAX_ASSESSMENT_BASIC_VALUE:
        return getTaxAssessmentBasicValue();
      case EdilangPackage.TAX_SEGMENT__TAX_DETAIL:
        return getTaxDetail();
      case EdilangPackage.TAX_SEGMENT__TAX_CATEGORY_CODE:
        return getTaxCategoryCode();
      case EdilangPackage.TAX_SEGMENT__PARTY_TAX_IDENTIFIER:
        return getPartyTaxIdentifier();
      case EdilangPackage.TAX_SEGMENT__CALCULATION_SEQUENCE_CODE:
        return getCalculationSequenceCode();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdilangPackage.TAX_SEGMENT__TAX_FUNCTION_CODE_QUALIFIER:
        setTaxFunctionCodeQualifier((String)newValue);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_TYPE:
        setTaxType((TaxType)newValue);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL:
        setTaxAccountDetail((TaxAccountDetail)newValue);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_ASSESSMENT_BASIC_VALUE:
        setTaxAssessmentBasicValue((String)newValue);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_DETAIL:
        setTaxDetail((TaxDetail)newValue);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_CATEGORY_CODE:
        setTaxCategoryCode((String)newValue);
        return;
      case EdilangPackage.TAX_SEGMENT__PARTY_TAX_IDENTIFIER:
        setPartyTaxIdentifier((String)newValue);
        return;
      case EdilangPackage.TAX_SEGMENT__CALCULATION_SEQUENCE_CODE:
        setCalculationSequenceCode((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.TAX_SEGMENT__TAX_FUNCTION_CODE_QUALIFIER:
        setTaxFunctionCodeQualifier(TAX_FUNCTION_CODE_QUALIFIER_EDEFAULT);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_TYPE:
        setTaxType((TaxType)null);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL:
        setTaxAccountDetail((TaxAccountDetail)null);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_ASSESSMENT_BASIC_VALUE:
        setTaxAssessmentBasicValue(TAX_ASSESSMENT_BASIC_VALUE_EDEFAULT);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_DETAIL:
        setTaxDetail((TaxDetail)null);
        return;
      case EdilangPackage.TAX_SEGMENT__TAX_CATEGORY_CODE:
        setTaxCategoryCode(TAX_CATEGORY_CODE_EDEFAULT);
        return;
      case EdilangPackage.TAX_SEGMENT__PARTY_TAX_IDENTIFIER:
        setPartyTaxIdentifier(PARTY_TAX_IDENTIFIER_EDEFAULT);
        return;
      case EdilangPackage.TAX_SEGMENT__CALCULATION_SEQUENCE_CODE:
        setCalculationSequenceCode(CALCULATION_SEQUENCE_CODE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.TAX_SEGMENT__TAX_FUNCTION_CODE_QUALIFIER:
        return TAX_FUNCTION_CODE_QUALIFIER_EDEFAULT == null ? taxFunctionCodeQualifier != null : !TAX_FUNCTION_CODE_QUALIFIER_EDEFAULT.equals(taxFunctionCodeQualifier);
      case EdilangPackage.TAX_SEGMENT__TAX_TYPE:
        return taxType != null;
      case EdilangPackage.TAX_SEGMENT__TAX_ACCOUNT_DETAIL:
        return taxAccountDetail != null;
      case EdilangPackage.TAX_SEGMENT__TAX_ASSESSMENT_BASIC_VALUE:
        return TAX_ASSESSMENT_BASIC_VALUE_EDEFAULT == null ? taxAssessmentBasicValue != null : !TAX_ASSESSMENT_BASIC_VALUE_EDEFAULT.equals(taxAssessmentBasicValue);
      case EdilangPackage.TAX_SEGMENT__TAX_DETAIL:
        return taxDetail != null;
      case EdilangPackage.TAX_SEGMENT__TAX_CATEGORY_CODE:
        return TAX_CATEGORY_CODE_EDEFAULT == null ? taxCategoryCode != null : !TAX_CATEGORY_CODE_EDEFAULT.equals(taxCategoryCode);
      case EdilangPackage.TAX_SEGMENT__PARTY_TAX_IDENTIFIER:
        return PARTY_TAX_IDENTIFIER_EDEFAULT == null ? partyTaxIdentifier != null : !PARTY_TAX_IDENTIFIER_EDEFAULT.equals(partyTaxIdentifier);
      case EdilangPackage.TAX_SEGMENT__CALCULATION_SEQUENCE_CODE:
        return CALCULATION_SEQUENCE_CODE_EDEFAULT == null ? calculationSequenceCode != null : !CALCULATION_SEQUENCE_CODE_EDEFAULT.equals(calculationSequenceCode);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (taxFunctionCodeQualifier: ");
    result.append(taxFunctionCodeQualifier);
    result.append(", taxAssessmentBasicValue: ");
    result.append(taxAssessmentBasicValue);
    result.append(", taxCategoryCode: ");
    result.append(taxCategoryCode);
    result.append(", partyTaxIdentifier: ");
    result.append(partyTaxIdentifier);
    result.append(", calculationSequenceCode: ");
    result.append(calculationSequenceCode);
    result.append(')');
    return result.toString();
  }

} //TAXSegmentImpl
