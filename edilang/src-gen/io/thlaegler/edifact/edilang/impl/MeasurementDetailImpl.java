/**
 * generated by Xtext 2.26.0
 */
package io.thlaegler.edifact.edilang.impl;

import io.thlaegler.edifact.edilang.EdilangPackage;
import io.thlaegler.edifact.edilang.MeasurementDetail;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Measurement Detail</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.MeasurementDetailImpl#getMeasuredAttributeCode <em>Measured Attribute Code</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.MeasurementDetailImpl#getMeasurementSignificanceCode <em>Measurement Significance Code</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.MeasurementDetailImpl#getNonDiscreteMeasurementNameCode <em>Non Discrete Measurement Name Code</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.MeasurementDetailImpl#getNonDiscreteMeasurementName <em>Non Discrete Measurement Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MeasurementDetailImpl extends AbstractEdiFunctionImpl implements MeasurementDetail
{
  /**
   * The default value of the '{@link #getMeasuredAttributeCode() <em>Measured Attribute Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasuredAttributeCode()
   * @generated
   * @ordered
   */
  protected static final String MEASURED_ATTRIBUTE_CODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMeasuredAttributeCode() <em>Measured Attribute Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasuredAttributeCode()
   * @generated
   * @ordered
   */
  protected String measuredAttributeCode = MEASURED_ATTRIBUTE_CODE_EDEFAULT;

  /**
   * The default value of the '{@link #getMeasurementSignificanceCode() <em>Measurement Significance Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasurementSignificanceCode()
   * @generated
   * @ordered
   */
  protected static final String MEASUREMENT_SIGNIFICANCE_CODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMeasurementSignificanceCode() <em>Measurement Significance Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasurementSignificanceCode()
   * @generated
   * @ordered
   */
  protected String measurementSignificanceCode = MEASUREMENT_SIGNIFICANCE_CODE_EDEFAULT;

  /**
   * The default value of the '{@link #getNonDiscreteMeasurementNameCode() <em>Non Discrete Measurement Name Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNonDiscreteMeasurementNameCode()
   * @generated
   * @ordered
   */
  protected static final String NON_DISCRETE_MEASUREMENT_NAME_CODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNonDiscreteMeasurementNameCode() <em>Non Discrete Measurement Name Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNonDiscreteMeasurementNameCode()
   * @generated
   * @ordered
   */
  protected String nonDiscreteMeasurementNameCode = NON_DISCRETE_MEASUREMENT_NAME_CODE_EDEFAULT;

  /**
   * The default value of the '{@link #getNonDiscreteMeasurementName() <em>Non Discrete Measurement Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNonDiscreteMeasurementName()
   * @generated
   * @ordered
   */
  protected static final String NON_DISCRETE_MEASUREMENT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNonDiscreteMeasurementName() <em>Non Discrete Measurement Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNonDiscreteMeasurementName()
   * @generated
   * @ordered
   */
  protected String nonDiscreteMeasurementName = NON_DISCRETE_MEASUREMENT_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MeasurementDetailImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdilangPackage.eINSTANCE.getMeasurementDetail();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMeasuredAttributeCode()
  {
    return measuredAttributeCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMeasuredAttributeCode(String newMeasuredAttributeCode)
  {
    String oldMeasuredAttributeCode = measuredAttributeCode;
    measuredAttributeCode = newMeasuredAttributeCode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.MEASUREMENT_DETAIL__MEASURED_ATTRIBUTE_CODE, oldMeasuredAttributeCode, measuredAttributeCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMeasurementSignificanceCode()
  {
    return measurementSignificanceCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMeasurementSignificanceCode(String newMeasurementSignificanceCode)
  {
    String oldMeasurementSignificanceCode = measurementSignificanceCode;
    measurementSignificanceCode = newMeasurementSignificanceCode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.MEASUREMENT_DETAIL__MEASUREMENT_SIGNIFICANCE_CODE, oldMeasurementSignificanceCode, measurementSignificanceCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNonDiscreteMeasurementNameCode()
  {
    return nonDiscreteMeasurementNameCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNonDiscreteMeasurementNameCode(String newNonDiscreteMeasurementNameCode)
  {
    String oldNonDiscreteMeasurementNameCode = nonDiscreteMeasurementNameCode;
    nonDiscreteMeasurementNameCode = newNonDiscreteMeasurementNameCode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME_CODE, oldNonDiscreteMeasurementNameCode, nonDiscreteMeasurementNameCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNonDiscreteMeasurementName()
  {
    return nonDiscreteMeasurementName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNonDiscreteMeasurementName(String newNonDiscreteMeasurementName)
  {
    String oldNonDiscreteMeasurementName = nonDiscreteMeasurementName;
    nonDiscreteMeasurementName = newNonDiscreteMeasurementName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME, oldNonDiscreteMeasurementName, nonDiscreteMeasurementName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdilangPackage.MEASUREMENT_DETAIL__MEASURED_ATTRIBUTE_CODE:
        return getMeasuredAttributeCode();
      case EdilangPackage.MEASUREMENT_DETAIL__MEASUREMENT_SIGNIFICANCE_CODE:
        return getMeasurementSignificanceCode();
      case EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME_CODE:
        return getNonDiscreteMeasurementNameCode();
      case EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME:
        return getNonDiscreteMeasurementName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdilangPackage.MEASUREMENT_DETAIL__MEASURED_ATTRIBUTE_CODE:
        setMeasuredAttributeCode((String)newValue);
        return;
      case EdilangPackage.MEASUREMENT_DETAIL__MEASUREMENT_SIGNIFICANCE_CODE:
        setMeasurementSignificanceCode((String)newValue);
        return;
      case EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME_CODE:
        setNonDiscreteMeasurementNameCode((String)newValue);
        return;
      case EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME:
        setNonDiscreteMeasurementName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.MEASUREMENT_DETAIL__MEASURED_ATTRIBUTE_CODE:
        setMeasuredAttributeCode(MEASURED_ATTRIBUTE_CODE_EDEFAULT);
        return;
      case EdilangPackage.MEASUREMENT_DETAIL__MEASUREMENT_SIGNIFICANCE_CODE:
        setMeasurementSignificanceCode(MEASUREMENT_SIGNIFICANCE_CODE_EDEFAULT);
        return;
      case EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME_CODE:
        setNonDiscreteMeasurementNameCode(NON_DISCRETE_MEASUREMENT_NAME_CODE_EDEFAULT);
        return;
      case EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME:
        setNonDiscreteMeasurementName(NON_DISCRETE_MEASUREMENT_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.MEASUREMENT_DETAIL__MEASURED_ATTRIBUTE_CODE:
        return MEASURED_ATTRIBUTE_CODE_EDEFAULT == null ? measuredAttributeCode != null : !MEASURED_ATTRIBUTE_CODE_EDEFAULT.equals(measuredAttributeCode);
      case EdilangPackage.MEASUREMENT_DETAIL__MEASUREMENT_SIGNIFICANCE_CODE:
        return MEASUREMENT_SIGNIFICANCE_CODE_EDEFAULT == null ? measurementSignificanceCode != null : !MEASUREMENT_SIGNIFICANCE_CODE_EDEFAULT.equals(measurementSignificanceCode);
      case EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME_CODE:
        return NON_DISCRETE_MEASUREMENT_NAME_CODE_EDEFAULT == null ? nonDiscreteMeasurementNameCode != null : !NON_DISCRETE_MEASUREMENT_NAME_CODE_EDEFAULT.equals(nonDiscreteMeasurementNameCode);
      case EdilangPackage.MEASUREMENT_DETAIL__NON_DISCRETE_MEASUREMENT_NAME:
        return NON_DISCRETE_MEASUREMENT_NAME_EDEFAULT == null ? nonDiscreteMeasurementName != null : !NON_DISCRETE_MEASUREMENT_NAME_EDEFAULT.equals(nonDiscreteMeasurementName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (measuredAttributeCode: ");
    result.append(measuredAttributeCode);
    result.append(", measurementSignificanceCode: ");
    result.append(measurementSignificanceCode);
    result.append(", nonDiscreteMeasurementNameCode: ");
    result.append(nonDiscreteMeasurementNameCode);
    result.append(", nonDiscreteMeasurementName: ");
    result.append(nonDiscreteMeasurementName);
    result.append(')');
    return result.toString();
  }

} //MeasurementDetailImpl
