/**
 * generated by Xtext 2.26.0
 */
package io.thlaegler.edifact.edilang.impl;

import io.thlaegler.edifact.edilang.EdilangPackage;
import io.thlaegler.edifact.edilang.GISSegment;
import io.thlaegler.edifact.edilang.ProcessingIndicator;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>GIS Segment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.GISSegmentImpl#getProcessingIndicator <em>Processing Indicator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GISSegmentImpl extends AbstractEdiSegmentImpl implements GISSegment
{
  /**
   * The cached value of the '{@link #getProcessingIndicator() <em>Processing Indicator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcessingIndicator()
   * @generated
   * @ordered
   */
  protected ProcessingIndicator processingIndicator;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GISSegmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdilangPackage.eINSTANCE.getGISSegment();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessingIndicator getProcessingIndicator()
  {
    return processingIndicator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcessingIndicator(ProcessingIndicator newProcessingIndicator, NotificationChain msgs)
  {
    ProcessingIndicator oldProcessingIndicator = processingIndicator;
    processingIndicator = newProcessingIndicator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR, oldProcessingIndicator, newProcessingIndicator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcessingIndicator(ProcessingIndicator newProcessingIndicator)
  {
    if (newProcessingIndicator != processingIndicator)
    {
      NotificationChain msgs = null;
      if (processingIndicator != null)
        msgs = ((InternalEObject)processingIndicator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR, null, msgs);
      if (newProcessingIndicator != null)
        msgs = ((InternalEObject)newProcessingIndicator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR, null, msgs);
      msgs = basicSetProcessingIndicator(newProcessingIndicator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR, newProcessingIndicator, newProcessingIndicator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR:
        return basicSetProcessingIndicator(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR:
        return getProcessingIndicator();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR:
        setProcessingIndicator((ProcessingIndicator)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR:
        setProcessingIndicator((ProcessingIndicator)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.GIS_SEGMENT__PROCESSING_INDICATOR:
        return processingIndicator != null;
    }
    return super.eIsSet(featureID);
  }

} //GISSegmentImpl
