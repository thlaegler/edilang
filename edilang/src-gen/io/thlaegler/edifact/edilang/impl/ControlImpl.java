/**
 * generated by Xtext 2.26.0
 */
package io.thlaegler.edifact.edilang.impl;

import io.thlaegler.edifact.edilang.Control;
import io.thlaegler.edifact.edilang.EdilangPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Control</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.ControlImpl#getControlTotalTypeCodeQualifier <em>Control Total Type Code Qualifier</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.ControlImpl#getControlTotalValue <em>Control Total Value</em>}</li>
 *   <li>{@link io.thlaegler.edifact.edilang.impl.ControlImpl#getMeasurementUnitCode <em>Measurement Unit Code</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ControlImpl extends MinimalEObjectImpl.Container implements Control
{
  /**
   * The default value of the '{@link #getControlTotalTypeCodeQualifier() <em>Control Total Type Code Qualifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControlTotalTypeCodeQualifier()
   * @generated
   * @ordered
   */
  protected static final String CONTROL_TOTAL_TYPE_CODE_QUALIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getControlTotalTypeCodeQualifier() <em>Control Total Type Code Qualifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControlTotalTypeCodeQualifier()
   * @generated
   * @ordered
   */
  protected String controlTotalTypeCodeQualifier = CONTROL_TOTAL_TYPE_CODE_QUALIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getControlTotalValue() <em>Control Total Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControlTotalValue()
   * @generated
   * @ordered
   */
  protected static final String CONTROL_TOTAL_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getControlTotalValue() <em>Control Total Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControlTotalValue()
   * @generated
   * @ordered
   */
  protected String controlTotalValue = CONTROL_TOTAL_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getMeasurementUnitCode() <em>Measurement Unit Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasurementUnitCode()
   * @generated
   * @ordered
   */
  protected static final String MEASUREMENT_UNIT_CODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMeasurementUnitCode() <em>Measurement Unit Code</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasurementUnitCode()
   * @generated
   * @ordered
   */
  protected String measurementUnitCode = MEASUREMENT_UNIT_CODE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ControlImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdilangPackage.eINSTANCE.getControl();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getControlTotalTypeCodeQualifier()
  {
    return controlTotalTypeCodeQualifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setControlTotalTypeCodeQualifier(String newControlTotalTypeCodeQualifier)
  {
    String oldControlTotalTypeCodeQualifier = controlTotalTypeCodeQualifier;
    controlTotalTypeCodeQualifier = newControlTotalTypeCodeQualifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.CONTROL__CONTROL_TOTAL_TYPE_CODE_QUALIFIER, oldControlTotalTypeCodeQualifier, controlTotalTypeCodeQualifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getControlTotalValue()
  {
    return controlTotalValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setControlTotalValue(String newControlTotalValue)
  {
    String oldControlTotalValue = controlTotalValue;
    controlTotalValue = newControlTotalValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.CONTROL__CONTROL_TOTAL_VALUE, oldControlTotalValue, controlTotalValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMeasurementUnitCode()
  {
    return measurementUnitCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMeasurementUnitCode(String newMeasurementUnitCode)
  {
    String oldMeasurementUnitCode = measurementUnitCode;
    measurementUnitCode = newMeasurementUnitCode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdilangPackage.CONTROL__MEASUREMENT_UNIT_CODE, oldMeasurementUnitCode, measurementUnitCode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdilangPackage.CONTROL__CONTROL_TOTAL_TYPE_CODE_QUALIFIER:
        return getControlTotalTypeCodeQualifier();
      case EdilangPackage.CONTROL__CONTROL_TOTAL_VALUE:
        return getControlTotalValue();
      case EdilangPackage.CONTROL__MEASUREMENT_UNIT_CODE:
        return getMeasurementUnitCode();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdilangPackage.CONTROL__CONTROL_TOTAL_TYPE_CODE_QUALIFIER:
        setControlTotalTypeCodeQualifier((String)newValue);
        return;
      case EdilangPackage.CONTROL__CONTROL_TOTAL_VALUE:
        setControlTotalValue((String)newValue);
        return;
      case EdilangPackage.CONTROL__MEASUREMENT_UNIT_CODE:
        setMeasurementUnitCode((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.CONTROL__CONTROL_TOTAL_TYPE_CODE_QUALIFIER:
        setControlTotalTypeCodeQualifier(CONTROL_TOTAL_TYPE_CODE_QUALIFIER_EDEFAULT);
        return;
      case EdilangPackage.CONTROL__CONTROL_TOTAL_VALUE:
        setControlTotalValue(CONTROL_TOTAL_VALUE_EDEFAULT);
        return;
      case EdilangPackage.CONTROL__MEASUREMENT_UNIT_CODE:
        setMeasurementUnitCode(MEASUREMENT_UNIT_CODE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdilangPackage.CONTROL__CONTROL_TOTAL_TYPE_CODE_QUALIFIER:
        return CONTROL_TOTAL_TYPE_CODE_QUALIFIER_EDEFAULT == null ? controlTotalTypeCodeQualifier != null : !CONTROL_TOTAL_TYPE_CODE_QUALIFIER_EDEFAULT.equals(controlTotalTypeCodeQualifier);
      case EdilangPackage.CONTROL__CONTROL_TOTAL_VALUE:
        return CONTROL_TOTAL_VALUE_EDEFAULT == null ? controlTotalValue != null : !CONTROL_TOTAL_VALUE_EDEFAULT.equals(controlTotalValue);
      case EdilangPackage.CONTROL__MEASUREMENT_UNIT_CODE:
        return MEASUREMENT_UNIT_CODE_EDEFAULT == null ? measurementUnitCode != null : !MEASUREMENT_UNIT_CODE_EDEFAULT.equals(measurementUnitCode);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (controlTotalTypeCodeQualifier: ");
    result.append(controlTotalTypeCodeQualifier);
    result.append(", controlTotalValue: ");
    result.append(controlTotalValue);
    result.append(", measurementUnitCode: ");
    result.append(measurementUnitCode);
    result.append(')');
    return result.toString();
  }

} //ControlImpl
